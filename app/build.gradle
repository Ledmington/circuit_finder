plugins {
	id 'java'
	id 'application'
	id 'com.diffplug.spotless' version '6.19.0'
	id 'com.github.ben-manes.versions' version '0.46.0'
	id 'com.adarshr.test-logger' version '3.2.0'
	id 'de.undercouch.download' version '5.4.0'
}

repositories {
	mavenCentral()
}

static def path(String... args) {
	return String.join(File.separator, args)
}

static def getDate() {
	return new Date().format('yyyyMMddHHmmss')
}

String appName = 'circuit-finder'
String appNameLowercase = 'circuit-finder'
String version = '0.1.0'
String appDescription = 'A search algorithm to find optimal logic circuits.'
String author = 'Filippo Barbari'
String authorMail = 'filippo.barbari@gmail.com'
String basePackage = "com.ledmington"
String fatJarBaseName = "${appNameLowercase}"
String fatJarName = "${fatJarBaseName}.jar"
String fatJarPath = path("${buildDir}", "libs", "${fatJarName}")
String mainClassName = "${basePackage}.Main"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

ext.junitVersion = "5.9.2"
dependencies {
	testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
	testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

application {
	mainClass = 'com.ledmington.Main'
}

tasks.named('test') {
	useJUnitPlatform()
}

testlogger {
	theme 'standard'

	showExceptions true
	showStackTraces false
	showFullStackTraces true
	showCauses true

	slowThreshold 2000

	showSummary true
	showSimpleNames false
	showPassed true
	showSkipped true
	showFailed true
	showOnlySlow false

	showStandardStreams true
	showPassedStandardStreams false
	showSkippedStandardStreams false
	showFailedStandardStreams true
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs << '-Xdiags:verbose'
	options.compilerArgs << '-Xlint:all'
	options.compilerArgs << '-Werror'
	options.deprecation = true
	options.encoding = 'UTF-8'
}

spotless {
	format 'misc', {
		target '*.gradle', '*.md', '.gitignore'
		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
		setEncoding('utf-8')
	}

	java {
		target fileTree('.') {
			include path('**', '*.java')
			exclude path('**', 'build', '**'), path('**', 'build-*', '**'), path('**', 'bin', '**')
		}
		removeUnusedImports()
		formatAnnotations()
		trimTrailingWhitespace()
		endWithNewline()
		setEncoding('utf-8')
		palantirJavaFormat('2.26.0')

		// check https://javadoc.io/doc/com.diffplug.spotless/spotless-plugin-gradle/latest/com/diffplug/gradle/spotless/JavaExtension.html
		importOrder('java', 'javax', 'javafx', 'com', 'org', group as String)

		licenseHeader String.join("\n",
				"/*",
				"* ${appName} - ${appDescription}",
				"* Copyright (C) 2023-${new Date().format('yyyy')} ${author} <${authorMail}>",
				"*",
				"* This program is free software: you can redistribute it and/or modify",
				"* it under the terms of the GNU General Public License as published by",
				"* the Free Software Foundation, either version 3 of the License, or",
				"* (at your option) any later version.",
				"*",
				"* This program is distributed in the hope that it will be useful,",
				"* but WITHOUT ANY WARRANTY; without even the implied warranty of",
				"* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
				"* GNU General Public License for more details.",
				"*",
				"* You should have received a copy of the GNU General Public License",
				"* along with this program.  If not, see <http://www.gnu.org/licenses/>.",
				"*/",
		)
	}
}

tasks.compileJava.dependsOn(spotlessApply)

tasks.register('fatJar', Jar) {
	group 'distribution'
	description 'Builds the fat jar of the application'
	from sourceSets.main.output
	dependsOn configurations.runtimeClasspath
	from {
		configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
	}
	duplicatesStrategy = 'include'
	manifest {
		archiveBaseName = appNameLowercase
		attributes(
				//"Implementation-Title": "Gradle",
				"Implementation-Version": version,
				"Main-Class": "$mainClassName"
		)
	}
	archiveBaseName = "${fatJarBaseName}"

	doLast {
		println "The fat jar is ${fatJarPath}"
		println String.format("Fat jar size: %.3f MB", new File(fatJarPath).length() / 1_000_000)
	}
}

def asyncProfilerVersion = "2.9"

if (System.getProperty("os.name").toLowerCase().contains("windows")) {
	println("Sorry, no support for async-profiler on Windows at the moment. The tasks 'downloadAsyncProfiler', 'asyncProfiler' and 'flamegraph' will not be generated.")
	println("Check this for news: https://github.com/async-profiler/async-profiler/issues/188")
} else {
	tasks.register('downloadAsyncProfiler', Download) {
		src "https://github.com/async-profiler/async-profiler/releases/download/v${asyncProfilerVersion}/async-profiler-${asyncProfilerVersion}-linux-x64.tar.gz"
		dest new File(buildDir, "async-profiler.tar.gz")
		overwrite false
	}

	tasks.register('asyncProfiler', Copy) {
		dependsOn downloadAsyncProfiler
		from tarTree(downloadAsyncProfiler.dest)
		into path("${buildDir}", "async-profiler")
		includeEmptyDirs(false)
		ext {
			profiler = path("${buildDir}", "async-profiler", "async-profiler-${asyncProfilerVersion}-linux-x64", "build", "libasyncProfiler.so")
		}
	}

	tasks.register('flamegraph', JavaExec) {
		dependsOn([asyncProfiler, fatJar])
		group 'useful'
		description 'Runs the app with async-profiler attached and generates a flamegraph'
		String flamegraphFile = path("${buildDir}", "flamegraphs", "flamegraph-cpu-${getDate()}.html")
		doFirst {
			mkdir path("${buildDir}", "flamegraphs")
		}
		classpath fatJarPath
		//args = []
		jvmArgs = [
				"-agentpath:${asyncProfiler.profiler}=start,event=cpu,file=${flamegraphFile}"
		]
		doLast {
			if(new File(flamegraphFile).exists()) {
				println "\n"
				println "Generated flamegraph ${flamegraphFile}"
			} else {
				println "\n"
				println "It seems that a flamegraph has not been generated. Have you checked your perf_event_paranoid?"
			}
		}
	}
}
